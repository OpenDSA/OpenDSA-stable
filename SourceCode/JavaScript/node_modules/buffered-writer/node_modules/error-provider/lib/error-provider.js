"use strict";

var errors = module.exports = {};

//https://github.com/joyent/node/blob/master/deps/uv/include/uv.h

errors.UNKNOWN = { errno: -1, code: "UNKNOWN", message: "unknown error" },
errors.OK = { errno: 0, code: "OK", message: "success" },
errors.EOF = { errno: 1, code: "EOF", message: "end of file" },
errors.EADDRINFO = { errno: 2, code: "EADDRINFO", message: "getaddrinfo error" },
errors.EACCES = { errno: 3, code: "EACCES", message: "permission denied" },
errors.EAGAIN = { errno: 4, code: "EAGAIN", message: "no more processes" },
errors.EADDRINUSE = { errno: 5, code: "EADDRINUSE", message: "address already in use" },
errors.EADDRNOTAVAIL = { errno: 6, code: "EADDRNOTAVAIL", message: "" },
errors.EAFNOSUPPORT = { errno: 7, code: "EAFNOSUPPORT", message: "" },
errors.EALREADY = { errno: 8, code: "EALREADY", message: "" },
errors.EBADF = { errno: 9, code: "EBADF", message: "bad file descriptor" },
errors.EBUSY = { errno: 10, code: "EBUSY", message: "resource busy or locked" },
errors.ECONNABORTED = { errno: 11, code: "ECONNABORTED", message: "software caused connection abort" },
errors.ECONNREFUSED = { errno: 12, code: "ECONNREFUSED", message: "connection refused" },
errors.ECONNRESET = { errno: 13, code: "ECONNRESET", message: "connection reset by peer" },
errors.EDESTADDRREQ = { errno: 14, code: "EDESTADDRREQ", message: "destination address required" },
errors.EFAULT = { errno: 15, code: "EFAULT", message: "bad address in system call argument" },
errors.EHOSTUNREACH = { errno: 16, code: "EHOSTUNREACH", message: "host is unreachable" },
errors.EINTR = { errno: 17, code: "EINTR", message: "interrupted system call" },
errors.EINVAL = { errno: 18, code: "EINVAL", message: "invalid argument" },
errors.EISCONN = { errno: 19, code: "EISCONN", message: "socket is already connected" },
errors.EMFILE = { errno: 20, code: "EMFILE", message: "too many open files" },
errors.EMSGSIZE = { errno: 21, code: "EMSGSIZE", message: "message too long" },
errors.ENETDOWN = { errno: 22, code: "ENETDOWN", message: "network is down" },
errors.ENETUNREACH = { errno: 23, code: "ENETUNREACH", message: "network is unreachable" },
errors.ENFILE = { errno: 24, code: "ENFILE", message: "file table overflow" },
errors.ENOBUFS = { errno: 25, code: "ENOBUFS", message: "no buffer space available" },
errors.ENOMEM = { errno: 26, code: "ENOMEM", message: "not enough memory" },
errors.ENOTDIR = { errno: 27, code: "ENOTDIR", message: "not a directory" },
errors.EISDIR = { errno: 28, code: "EISDIR", message: "illegal operation on a directory" },
errors.ENONET = { errno: 29, code: "ENONET", message: "machine is not on the network" },
errors.ENOTCONN = { errno: 31, code: "ENOTCONN", message: "socket is not connected" },
errors.ENOTSOCK = { errno: 32, code: "ENOTSOCK", message: "socket operation on non-socket" },
errors.ENOTSUP = { errno: 33, code: "ENOTSUP", message: "operation not supported on socket" },
errors.ENOENT = { errno: 34, code: "ENOENT", message: "no such file or directory" },
errors.ENOSYS = { errno: 35, code: "ENOSYS", message: "function not implemented" },
errors.EPIPE = { errno: 36, code: "EPIPE", message: "broken pipe" },
errors.EPROTO = { errno: 37, code: "EPROTO", message: "protocol error" },
errors.EPROTONOSUPPORT = { errno: 38, code: "EPROTONOSUPPORT", message: "protocol not supported" },
errors.EPROTOTYPE = { errno: 39, code: "EPROTOTYPE", message: "protocol wrong type for socket" },
errors.ETIMEDOUT = { errno: 40, code: "ETIMEDOUT", message: "connection timed out" },
errors.ECHARSET = { errno: 41, code: "ECHARSET", message: "" },
errors.EAIFAMNOSUPPORT = { errno: 42, code: "EAIFAMNOSUPPORT", message: "" },
errors.EAISERVICE = { errno: 44, code: "EAISERVICE", message: "" },
errors.EAISOCKTYPE = { errno: 45, code: "EAISOCKTYPE", message: "" },
errors.ESHUTDOWN = { errno: 46, code: "ESHUTDOWN", message: "" },
errors.EEXIST = { errno: 47, code: "EEXIST", message: "file already exists" },
errors.ESRCH = { errno: 48, code: "ESRCH", message: "no such process" },
errors.ENAMETOOLONG = { errno: 49, code: "ENAMETOOLONG", message: "name too long" },
errors.EPERM = { errno: 50, code: "EPERM", message: "operation not permitted" },
errors.ELOOP = { errno: 51, code: "ELOOP", message: "too many symbolic links encountered" },
errors.EXDEV = { errno: 52, code: "EXDEV", message: "cross-device link not permitted" },
errors.ENOTEMPTY = { errno: 53, code: "ENOTEMPTY", message: "directory not empty" },
errors.ENOSPC = { errno: 54, code: "ENOSPC", message: "no space left on device" },
errors.EIO = { errno: 55, code: "EIO", message: "i/o error" },
errors.EROFS = { errno: 56, code: "EROFS", message: "read-only file system" },
errors.ENODEV = { errno: 57, code: "ENODEV", message: "no such device" },
errors.ESPIPE = { errno: 58, code: "ESPIPE", message: "invalid seek" },
errors.ECANCELED = { errno: 59, code: "ECANCELED", message: "operation canceled" }

errors._codes = {
	"-1": "UNKNOWN",
	"0": "OK",
	"1": "EOF",
	"2": "EADDRINFO",
	"3": "EACCES",
	"4": "EAGAIN",
	"5": "EADDRINUSE",
	"6": "EADDRNOTAVAIL",
	"7": "EAFNOSUPPORT",
	"8": "EALREADY",
	"9": "EBADF",
	"10": "EBUSY",
	"11": "ECONNABORTED",
	"12": "ECONNREFUSED",
	"13": "ECONNRESET",
	"14": "EDESTADDRREQ",
	"15": "EFAULT",
	"16": "EHOSTUNREACH",
	"17": "EINTR",
	"18": "EINVAL",
	"19": "EISCONN",
	"20": "EMFILE",
	"21": "EMSGSIZE",
	"22": "ENETDOWN",
	"23": "ENETUNREACH",
	"24": "ENFILE",
	"25": "ENOBUFS",
	"26": "ENOMEM",
	"27": "ENOTDIR",
	"28": "EISDIR",
	"29": "ENONET",
	"31": "ENOTCONN",
	"32": "ENOTSOCK",
	"33": "ENOTSUP",
	"34": "ENOENT",
	"35": "ENOSYS",
	"36": "EPIPE",
	"37": "EPROTO",
	"38": "EPROTONOSUPPORT",
	"39": "EPROTOTYPE",
	"40": "ETIMEDOUT",
	"41": "ECHARSET",
	"42": "EAIFAMNOSUPPORT",
	"44": "EAISERVICE",
	"45": "EAISOCKTYPE",
	"46": "ESHUTDOWN",
	"47": "EEXIST",
	"48": "ESRCH",
	"49": "ENAMETOOLONG",
	"50": "EPERM",
	"51": "ELOOP",
	"52": "EXDEV",
	"53": "ENOTEMPTY",
	"54": "ENOSPC",
	"55": "EIO",
	"56": "EROFS",
	"57": "ENODEV",
	"58": "ESPIPE",
	"59": "ECANCELED"
};

errors.create = function (errno, code, message, props){
	var e = {
		errno: errno,
		code: code,
		message: message
	};
	
	if (props){
		for (var p in props){
			e[p] = props[p];
		}
	}
	
	this[code] = e;
	this._codes[errno] = code;
};

errors.get = function (id, vars){
	var error;
	var type = typeof id;
	
	if (type === "number"){
		error = this[this._codes[id]];
	}else if (type === "string"){
		error = this[id];
	}else{
		error = id;
	}
	
	if (!error){
		error = new Error ("Error not found");
		Object.defineProperty (error, "name", { enumerable: false });
		error.name = "ERROR_NOT_FOUND";
		error.code = error.name;
		error.id = id;
		throw error;
	}
	
	var p;
	var v;
	
	if (vars){
		for (p in error){
			if (typeof error[p] !== "string") continue;
			for (v in vars){
				error[p] = error[p].replace (new RegExp ("\\{" + v + "\\}", "g"),
						vars[v]);
			}
		}
	}
	
	var e = new Error (error.message);
	
	for (p in error){
		e[p] = error[p];
	}
	
	Object.defineProperty (e, "name", { value: e.code, enumerable: false });
	return e;
};

errors.local = function (){
	return {
		create: errors.create,
		get: errors.get,
		next: errors.next,
		_next: 0,
		_codes: {}
	};
};

errors._next = 100;
errors.next = function (){
	return this._next++;
};