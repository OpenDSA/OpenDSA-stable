/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,2],$V1=[1,4],$V2=[11,16],$V3=[2,5],$V4=[1,16],$V5=[1,20],$V6=[2,7],$V7=[1,31],$V8=[2,42],$V9=[2,44],$Va=[1,35],$Vb=[1,56],$Vc=[1,59],$Vd=[1,65],$Ve=[1,66],$Vf=[1,67],$Vg=[1,57],$Vh=[1,63],$Vi=[1,64],$Vj=[1,62],$Vk=[1,58],$Vl=[1,68],$Vm=[1,69],$Vn=[1,70],$Vo=[1,61],$Vp=[16,57],$Vq=[9,13,14,16,40,41,43,45,46,47,51,52,53,54,56,57,58,61,65,66,67,68,69,70,71,72,73,74,76,77,78],$Vr=[1,80],$Vs=[2,60],$Vt=[9,13,40,41,43,46,47,51,54,58,65,66,67,76],$Vu=[2,62],$Vv=[2,64],$Vw=[1,136];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"decls":4,"PUBLIC":5,"CLASS":6,"DRIVER":7,"EXTENDS":8,"VAR":9,"LBRACE":10,"METHOD":11,"MAIN":12,"LPAREN":13,"RPAREN":14,"block":15,"RBRACE":16,"EOF":17,"class":18,"ivars":19,"methods":20,"PROTECTED":21,"method":22,"formals":23,"exp":24,"var_exp":25,"intlit_exp":26,"fn_exp":27,"app_exp":28,"prim1_app_exp":29,"prim2_app_exp":30,"if_exp":31,"let_exp":32,"print_exp":33,"print2_exp":34,"assign_exp":35,"this_exp":36,"new_exp":37,"super_call":38,"method_call":39,"THIS":40,"NEW":41,"csargs":42,"CALL":43,"SUPER":44,"DOT":45,"INT":46,"PRINT":47,"DQUOTE":48,"optional":49,"COLON":50,"SET":51,"EQ":52,"SEMICOLON":53,"LET":54,"bindings":55,"IN":56,"END":57,"FN":58,"THATRETURNS":59,"moreformals":60,"COMMA":61,"args":62,"prim1_op":63,"prim2_op":64,"ADD1":65,"NEG":66,"NOT":67,"PLUS":68,"MINUS":69,"TIMES":70,"DIV":71,"REM":72,"LT":73,"GT":74,"more_csargs":75,"IF":76,"THEN":77,"ELSE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"PUBLIC",6:"CLASS",7:"DRIVER",8:"EXTENDS",9:"VAR",10:"LBRACE",11:"METHOD",12:"MAIN",13:"LPAREN",14:"RPAREN",16:"RBRACE",17:"EOF",21:"PROTECTED",40:"THIS",41:"NEW",43:"CALL",44:"SUPER",45:"DOT",46:"INT",47:"PRINT",48:"DQUOTE",50:"COLON",51:"SET",52:"EQ",53:"SEMICOLON",54:"LET",56:"IN",57:"END",58:"FN",59:"THATRETURNS",61:"COMMA",65:"ADD1",66:"NEG",67:"NOT",68:"PLUS",69:"MINUS",70:"TIMES",71:"DIV",72:"REM",73:"LT",74:"GT",76:"IF",77:"THEN",78:"ELSE"},
productions_: [0,[3,16],[4,0],[4,2],[18,8],[19,0],[19,3],[20,0],[20,2],[22,8],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[36,1],[37,5],[38,7],[39,7],[25,1],[26,1],[33,2],[34,5],[49,1],[49,1],[35,4],[15,1],[15,3],[32,5],[55,3],[55,4],[27,6],[23,0],[23,2],[60,0],[60,3],[28,4],[29,4],[30,5],[63,1],[63,1],[63,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[62,0],[62,2],[42,0],[42,2],[75,0],[75,3],[31,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return SLang.absyn.createProgram($$[$0-15],$$[$0-3]); 
break;
case 2: case 5: case 7: case 42: case 60: case 62: case 64:
 this.$ = [ ]; 
break;
case 3: case 6: case 8:
 $$[$0].unshift($$[$0-1]);  this.$ = $$[$0]; 
break;
case 4:
 this.$ = SLang.absyn.createClass($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1]); 
break;
case 9:
 this.$ = SLang.absyn.createMethod($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 34: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59:
 this.$ = $$[$0]; 
break;
case 25:
 this.$ = SLang.absyn.createThisExp(); 
break;
case 26:
 this.$ = SLang.absyn.createNewExp($$[$0-3],$$[$0-1]); 
break;
case 27:
 this.$ = SLang.absyn.createSuperCall($$[$0-3],$$[$0-1]); 
break;
case 28:
 this.$ = SLang.absyn.createMethodCall($$[$0-5],$$[$0-3],$$[$0-1]); 
break;
case 29:
 this.$ = SLang.absyn.createVarExp( $$[$0] ); 
break;
case 30:
 this.$ = SLang.absyn.createIntExp( $$[$0] ); 
break;
case 31:
 this.$ = SLang.absyn.createPrintExp( $$[$0] ); 
break;
case 32:
 this.$ = SLang.absyn.createPrint2Exp( $$[$0-2], $$[$0] ); 
break;
case 33:
 this.$ = null; 
break;
case 35:
 this.$ = SLang.absyn.createAssignExp( $$[$0-2], $$[$0] ); 
break;
case 36:
 this.$ = [ $$[$0] ]; 
break;
case 37:
 $$[$0].unshift( $$[$0-2] ); this.$ = $$[$0]; 
break;
case 38:
 var args = $$[$0-3][1]; args.unshift( "args" );
             var fnexp = SLang.absyn.createFnExp($$[$0-3][0],$$[$0-1]);
             this.$ = SLang.absyn.createAppExp(fnexp,args);
           
break;
case 39:
 this.$ = [ [ $$[$0-2] ], [ $$[$0] ] ]; 
break;
case 40:
 var vars = $$[$0][0];  vars.unshift($$[$0-3]);
             var vals = $$[$0][1];  vals.unshift($$[$0-1]);
	     this.$ = [ vars, vals ];
           
break;
case 41:
 this.$ = SLang.absyn.createFnExp($$[$0-3],[$$[$0]]); 
break;
case 43: case 61:
 var result;
          if ($$[$0] === [ ])
	     result = [ $$[$0-1] ];
          else {
             $$[$0].unshift($$[$0-1]);
             result = $$[$0];
          }
          this.$ = result;
        
break;
case 44:
 this.$ = [ ] 
break;
case 45:
 $$[$0].unshift($$[$0-1]); 
         this.$ = $$[$0]; 
break;
case 46:
  $$[$0-1].unshift("args");
          this.$ = SLang.absyn.createAppExp($$[$0-2],$$[$0-1]); 
break;
case 47:
 this.$ = SLang.absyn.createPrim1AppExp($$[$0-3],$$[$0-1]); 
break;
case 48:
 this.$ = SLang.absyn.createPrim2AppExp($$[$0-2],$$[$0-3],$$[$0-1]); 
break;
case 63: case 65:
 $$[$0].unshift($$[$0-1]); this.$ = $$[$0]; 
break;
case 66:
 this.$ = SLang.absyn.createIfExp($$[$0-4],$$[$0-2],$$[$0]); 
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,18:3},{1:[3]},{5:[1,5]},{4:6,5:$V0,6:$V1,18:3},{9:[1,7]},{6:[1,8]},{5:[2,3]},{8:[1,9]},{7:[1,10]},{9:[1,11]},{8:[1,12]},{10:[1,13]},{9:[1,14]},o($V2,$V3,{19:15,21:$V4}),{10:[1,17]},{11:$V5,16:$V6,20:18,22:19},{9:[1,21]},{11:[1,22]},{16:[1,23]},{11:$V5,16:$V6,20:24,22:19},{9:[1,25]},o($V2,$V3,{19:26,21:$V4}),{12:[1,27]},o([5,6],[2,4]),{16:[2,8]},{13:[1,28]},o($V2,[2,6]),{13:[1,29]},{9:$V7,14:$V8,23:30},{14:[1,32]},{14:[1,33]},{14:$V9,60:34,61:$Va},{10:[1,36]},{10:[1,37]},{14:[2,43]},{9:[1,38]},{9:$Vb,13:$Vc,15:39,24:40,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,15:71,24:40,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{14:$V9,60:72,61:$Va},{16:[1,73]},o($Vp,[2,36],{53:[1,74]}),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,29]),o($Vq,[2,30]),{13:[1,75]},{9:$Vb,13:$Vc,24:76,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{13:[1,77]},{9:$Vb,13:$Vc,24:78,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vr,55:79},{9:$Vb,13:$Vc,24:81,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,48:[1,82],51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:[1,83]},o($Vq,[2,25]),{9:[1,84]},{9:$Vb,13:$Vc,24:86,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,44:[1,85],46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{13:[2,49]},{13:[2,50]},{13:[2,51]},{16:[1,87]},{14:[2,45]},{16:[1,88]},{9:$Vb,13:$Vc,15:89,24:40,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$V7,14:$V8,23:90},{9:$Vb,13:$Vc,14:$Vs,24:93,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,52:[1,101],54:$Vj,58:$Vk,62:91,63:60,64:92,65:$Vl,66:$Vm,67:$Vn,68:[1,94],69:[1,95],70:[1,96],71:[1,97],72:[1,98],73:[1,99],74:[1,100],76:$Vo},{9:$Vb,13:$Vc,24:102,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{77:[1,103]},{56:[1,104]},{52:[1,105]},o($Vq,[2,31]),{9:[1,106]},{52:[1,107]},{13:[1,108]},{45:[1,109]},{45:[1,110]},o($V2,[2,9]),{17:[1,111]},o($Vp,[2,37]),{14:[1,112]},{14:[1,113]},{9:$Vb,13:$Vc,24:114,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,14:$Vs,24:93,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,62:115,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},o($Vt,[2,52]),o($Vt,[2,53]),o($Vt,[2,54]),o($Vt,[2,55]),o($Vt,[2,56]),o($Vt,[2,57]),o($Vt,[2,58]),o($Vt,[2,59]),{14:[1,116]},{9:$Vb,13:$Vc,24:117,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,15:118,24:40,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,24:119,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{48:[1,120]},{9:$Vb,13:$Vc,24:121,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,14:$Vu,24:123,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,42:122,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:[1,124]},{9:[1,125]},{1:[2,1]},{59:[1,126]},o($Vq,[2,46]),{14:[1,127]},{14:[2,61]},o($Vq,[2,47]),{78:[1,128]},{57:[1,129]},{9:$Vr,55:130,56:[2,39]},{9:$Vb,13:$Vc,24:133,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,49:131,50:[1,132],51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},o($Vq,[2,35]),{14:[1,134]},{14:$Vv,61:$Vw,75:135},{13:[1,137]},{13:[1,138]},{9:$Vb,13:$Vc,24:139,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},o($Vq,[2,48]),{9:$Vb,13:$Vc,24:140,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},o($Vq,[2,38]),{56:[2,40]},o($Vq,[2,32]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,26]),{14:[2,63]},{9:$Vb,13:$Vc,24:141,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,14:$Vu,24:123,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,42:142,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},{9:$Vb,13:$Vc,14:$Vu,24:123,25:41,26:42,27:43,28:44,29:45,30:46,31:47,32:48,33:49,34:50,35:51,36:52,37:53,38:54,39:55,40:$Vd,41:$Ve,42:143,43:$Vf,46:$Vg,47:$Vh,51:$Vi,54:$Vj,58:$Vk,63:60,65:$Vl,66:$Vm,67:$Vn,76:$Vo},o($Vq,[2,41]),o($Vq,[2,66]),{14:$Vv,61:$Vw,75:144},{14:[1,145]},{14:[1,146]},{14:[2,65]},o($Vq,[2,27]),o($Vq,[2,28])],
defaultActions: {6:[2,3],24:[2,8],34:[2,43],68:[2,49],69:[2,50],70:[2,51],72:[2,45],111:[2,1],115:[2,61],130:[2,40],135:[2,63],144:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: return 58; 
break;
case 2: return 13; 
break;
case 3: return 14; 
break;
case 4: return 68; 
break;
case 5: return 70; 
break;
case 6: return 71; 
break;
case 7: return 72; 
break;
case 8: return 69; 
break;
case 9: return 73; 
break;
case 10: return 74; 
break;
case 11: return 52; 
break;
case 12: return 66; 
break;
case 13: return 67; 
break;
case 14: return 65; 
break;
case 15: return 54; 
break;
case 16: return 56; 
break;
case 17: return 57; 
break;
case 18: return 47; 
break;
case 19: return 51; 
break;
case 20: return 53; 
break;
case 21: return 50; 
break;
case 22: return 48; 
break;
case 23: return 61; 
break;
case 24: return 59; 
break;
case 25: return 76; 
break;
case 26: return 77; 
break;
case 27: return 78; 
break;
case 28: return 52; 
break;
case 29: return 10; 
break;
case 30: return 16; 
break;
case 31: return 5; 
break;
case 32: return 6; 
break;
case 33: return 8; 
break;
case 34: return 11; 
break;
case 35: return 12; 
break;
case 36: return 21; 
break;
case 37: return 7; 
break;
case 38: return 41; 
break;
case 39: return 45; 
break;
case 40: return 40; 
break;
case 41: return 44; 
break;
case 42: return 43; 
break;
case 43: return 17; 
break;
case 44: return 9; 
break;
case 45: return 46; 
break;
case 46: return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:fn\b)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:~)/,/^(?:not\b)/,/^(?:add1\b)/,/^(?:let\b)/,/^(?:in\b)/,/^(?:end\b)/,/^(?:print\b)/,/^(?:set\b)/,/^(?:;)/,/^(?::)/,/^(?:")/,/^(?:,)/,/^(?:=>)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:method\b)/,/^(?:main\b)/,/^(?:protected\b)/,/^(?:Driver\b)/,/^(?:new\b)/,/^(?:\.)/,/^(?:this\b)/,/^(?:super\b)/,/^(?:call\b)/,/^(?:$)/,/^(?:([a-zA-Z])(([a-zA-Z])|([0-9])|_)*)/,/^(?:([0-9])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}