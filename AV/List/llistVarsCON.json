{
  "translations" :{
    "en": {
      "av_c1": "Let's look at the data members for class <code>LList</code>.",
      "av_c2": "First, notice that class <code>LList</code> implements the <code>List</code> interface. This means that <code>LList</code> is required to give implementations for all of the methods listed as part of the <code>List</code> interface.",
      "av_c3": "The first private data member is <code>head</code>, which points to the first node of the list. The header is a link node like any other, but its value is ignored and it is not considered to be an actual element of the list.",
      "av_c4": "The second private data member is <code>tail</code>, which points to the trailer node. The trailer is a link node like any other, but its <code>next</code> field is set to <code>null</code>. Like the header node, the trailer node's value is ignored.",
      "av_c5": "<code>curr</code> points to the current node of the list. It could be any node on the list other than the <code>head</code> node. If <code>curr</code> points to the same node as <code>tail</code>, then <code>curr</code> is at the end of the list. In this case, a newly inserted node would go to the end (but before the trailer).",
      "av_c6": "Since there is no simple way to compute the length of the list simply from these three pointers, the list length is stored explicitly in <code>listSize</code>, and updated by every operation that adds or removes a node.",
      "av_c7": "Because <code>head</code>, <code>tail</code>, <code>curr</code>, and <code>listSize</code> are all declared to be <code>private</code>, they may only be accessed by methods of Class <code>LList</code>."
    }
  },
  "code" : {
    "processing": {
      "url": "../../../SourceCode/Processing/Lists/LList.pde",
      "lineNumbers": false,
      "startAfter": "/* *** ODSATag: LListVars *** */",
      "endBefore": "/* *** ODSAendTag: LListVars *** */",
      "tags": {
        "sig": 1,
        "head": 2,
        "tail": 3,
        "curr": 4,
        "listSize": 5
      }
    }
  }
}
