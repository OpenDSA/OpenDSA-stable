{
  "translations" :{
    "en": {
      "av_c1": "Consider inserting a record with key value 30 in this tree. We call the findhelp method with a pointer to the BST root (the node with value 37).",
      "av_c2": "Check what rt is pointing to. It is not null.",
      "av_c3": "Check the value at the root. We find that it is greater than what we are looking for.",
      "av_c4": "So we want to visit the left child.",
      "av_c5": "We make a recursive call with the left child as the new rt.",
      "av_c7": "Check the value at the root. We find that it is less than what we are looking for.",
      "av_c8": "So we want to visit the right child.",
      "av_c9": "We make a recursive call with the right child as the new rt.",
      "av_c14": "Check what rt is pointing to. This time it is null! So make a new node.",
      "av_c15": "At this point we have hit the base case on the recursive process. So now we will return out of the current instance of inserthelp.",
      "av_c16": "Unwinding the recursion one level brings us the node with value 32, which is to the parent of the new node that we just created. We now re-assign its left pointer to point to the return value from the call to inserthelp (the new node that we had just created).",
      "av_c17": "Unwinding the recursion another level brings us the node with value 24. We now re-assign its right pointer to point to the return value from the call to inserthelp.",
      "av_c18": "Unwinding the recursion another level brings us the node with value 37. We now re-assign its right pointer to point to the return value from the call to inserthelp.",
      "av_c19": "Finally we return from initial call to inserthelp, returning a pointer to the node with value 37 (the root of the original tree). We now re-assign the BST's root pointer."
    }
  },
  "code" : {
    "processing": {
      "url": "../../../SourceCode/Processing/Binary/BST.pde",
      "lineNumbers": false,
      "startAfter": "/* *** ODSATag: inserthelp *** */",
      "endBefore": "/* *** ODSAendTag: inserthelp *** */",
      "tags": {
         "sig": 1,
         "checknull": 2,
         "compare": 3,
         "visitleft": 4,
         "visitright": 6,
         "return": 7,
         "end": 8
      }
    }
  }
}
