"use strict";
(function ($) {
  var startArray = [73, 6, 57, 88, 60, 42, 83, 72, 48, 85];
  var av = new JSAV("heapsortCON");
  var bh = av.ds.binheap(startArray, {compare: function (a, b) { return b - a; },
                                      steps: false, heapify: false}); // make sure it is not a heap initially
  av.umsg("Initially, we start with our unsorted array.");
  av.displayInit();
  av.umsg("The first step is to heapify the array. We use a Max-heap, which might seem counter-intuitive at first. But you should see why soon.");
  av.step();
  for (var i = Math.floor(bh.size() / 2); i > 0; i--) {
    // make it a max heap
    bh.heapify(i, {noAnimation: true, steps: false});
  }
  av.umsg("Done heapifying.");
  av.step();
  av.umsg("Now we will 'delete' the max element, which actually moves it to the end of the current heap.");
  av.step();
  av.umsg("This is why we are using a max-heap. The maximum element is going to end up at the end of the array.");
  bh.swap(0, 9);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Now we re-heapify.");
  av.step();
  bh.swap(0, 1);
  av.umsg("Swap.");
  av.step();
  bh.swap(1, 4);
  av.umsg("Swap.");
  av.step();
  av.umsg("Now we are ready to repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 8);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 2);
  av.umsg("Swap.");
  av.step();
  bh.swap(2, 6);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 7);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 1);
  av.umsg("Swap.");
  av.step();
  bh.swap(1, 3);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 6);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 1);
  av.umsg("Swap.");
  av.step();
  bh.swap(1, 4);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 5);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 1);
  av.umsg("Swap.");
  av.step();
  bh.swap(1, 4);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 4);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 2);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 3);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify.");
  av.step();
  bh.swap(0, 1);
  av.umsg("Swap.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 2);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("Re-heapify: Nothing to do.");
  av.step();
  av.umsg("Repeat the process with the next max element");
  av.step();
  av.umsg("Swap it to the end.");
  bh.swap(0, 1);
  av.step();
  bh.heapsize(bh.heapsize() - 1);
  av.umsg("Decrement the heap size");
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.step();
  av.umsg("And now we have the least element in place as well, so we are done.");
  bh.heapsize(bh.heapsize() - 1);
  bh.css(bh.heapsize(), {"background-color": "#ddd"});
  av.recorded();
}(jQuery));
