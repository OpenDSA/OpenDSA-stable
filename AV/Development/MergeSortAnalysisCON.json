{
  "translations" :{
    "en": {
	  "Slide 1": "The analysis of merge sort is straightforward... Consider the following array of 8 elements",
	  "Slide 3": "Splitting the array into two halves requires 8 units of work",
	  "Slide 5": "Splitting the selected array into two halves requires 4 units of work",
	  "Slide 7": "Splitting the selected array into two halves requires 2 units of work",
	  "Slide 9": "Merging the green highlighted arrays requires 2 units of work",
	  "Slide 11": "Splitting the selected array into two halves requires 2 units of work",
	  "Slide 13": "Merging the green highlighted arrays requires 2 units of work",
	  "Slide 15": "Merging the green highlighted arrays requires 4 units of work",
	  "Slide 17": "Splitting the selected array into two halves requires 4 units of work",
	  "Slide 19": "Splitting the selected array into two halves requires 2 units of work",
	  "Slide 21": "Merging the green highlighted arrays requires 2 units of work",
	  "Slide 23": "Splitting the selected array into two halves requires 2 units of work",
	  "Slide 25": "Merging the green highlighted arrays requires 2 units of work",
	  "Slide 27": "Merging the green highlighted arrays requires 4 units of work",
	  "Slide 29": "Merging the green highlighted arrays requires 8 units of work",
	  "Slide 31": "Thus, we have $\\log{n+1}$ levels each of which requires $\\theta(n)$ amount of work",
	  "Slide 32": "Therefore, the total running time of merge sort is $\\theta(n\\log{n})$",
	  "Slide 33": "This cost is unaffected by the relative order of the values being sorted, thus this analysis holds for the best, average, and worst cases."
    }
  }
}
