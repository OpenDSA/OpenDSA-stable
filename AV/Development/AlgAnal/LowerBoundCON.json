{
  "translations" :{
    "en": {
      "Slide 1": "Let's see how we can define lower bounds and distinguish it from best cases.",
      "Slide 2": "The lower bound of an algorithm indicates the least amount of a resource that the algorithm needs for a problem of size $n$.",
      "Slide 3": "So what is the lower bound of the sequencial search algorithm?",
      "Slide 4": "<br><br>Remember, this is not the correct way to ask the question since we have three cases that affect the running time of the algorithm.", 
      "Slide 5": "In the best case of the algorithm, only a single element is investigated. $T(n) = 1$",
      "Slide 6": "<br><br>Accordingly, the lowest growth rate (lower bound) of the algorithm in the best case is $\\Omega(1)$.",
      "Slide 7": "In the worst case of the algorithm, $n$ elements are investigated. $T(n) = n$",
      "Slide 8": "<br><br>Accordingly, the lowest growth rate (lower bound) of the algorithm in the worst case is $\\Omega(n)$.",
      "Slide 9": "In the average case of the algorithm, $\\lceil\\frac{n}{2}\\rceil$ elements are investigated. $T(n) = \\frac{1}{2}n$",
      "Slide 10": "<br><br>Accordingly, the lowest growth rate (lower bound) of the algorithm in the average case is also $\\Omega(n)$ since we ignore constant terms.",
      "Slide 11": "Accordingly, the correct way to ask the question should be : <br><br>What is the lower bound of sequencial search in the best/average/worst case?",
      "Slide 12": "<br><br>And the answer should be..."


    }
  }
}
