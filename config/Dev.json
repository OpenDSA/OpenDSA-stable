{
  "title": "OpenDSA Modules Under Development",
  "book_dir": "Books",
  "code_dir": "SourceCode/Processing",
  "module_origin": "http://algoviz.org",
  "backend_address": "https://opendsa.cc.vt.edu/",
  "build_JSAV": false,
  "build_ODSA": true,
  "allow_anonymous_credit": true,
  "suppress_todo": false,
  "chapters": {
    "Preface": {
      "Intro": {
        "long_name": "How to Use this System",
        "exercises": {}
      },
      "Status": {
        "long_name": "OpenDSA Content Status",
        "exercises": {}
      }
    },
    "Introduction": {
      "Development/IntroDSA.rst": {
        "long_name": "Introduction to Data Structures and Algorithms",
        "exercises": {}
      }
    },
    "Mathematical Background": {
      "Development/SetDef": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/MiscMath": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/Logarithms": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/Summations": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/Recursion": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/Proofs": {
        "long_name": "Set Definitions",
        "exercises": {}
      },
      "Development/Estimation": {
        "long_name": "Set Definitions",
        "exercises": {}
      }
    },
    "Algorithm Analysis": {
      "Development/AnalPrelim": {
        "long_name": "Problems, Algorithms, and Programs",
        "exercises": {}
      }
    },
    "Design": {
      "Development/ADT": {
        "long_name": "Abstract Data Types",
        "exercises": {}
      },
      "Development/DesignPatterns": {
        "long_name": "Design Patterns",
        "exercises": {}
      }
    },
    "Linear Structures": {
      "Development/ListIntro": {
        "long_name": "Instroduction to Lists",
        "exercises": {}
      }
    },
    "BinaryTrees": {
      "Development/BinaryTree": {
        "long_name": "Binary Tree Introduction",
        "exercises": {}
      },
      "Development/BinaryTreeFullThm": {
        "long_name": "Full Binary Tree Theorem",
        "exercises": {}
      },
      "Development/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "exercises": {
	  "binarytreePreorder": {
            "long_name": "Preorder Exercise",
	    "required": false,
	    "points": 0.0,
	    "threshold": 1.0
          }
        }
      },
      "Development/BinaryTreeImpl": {
        "long_name": "Full Binary Tree Node Implementations",
        "exercises": {}
      },
      "Development/Composite": {
        "long_name": "Composite Design Pattern",
        "exercises": {}
      },
      "Development/BinaryTreeNodeSpace": {
        "long_name": "Full Binary Tree Node Space Requirements",
        "exercises": {}
      },
      "Development/CompleteTree": {
        "long_name": "Array Implementation for Complete Trees",
        "exercises": {}
      },
      "Development/BST": {
        "long_name": "Binary Search Trees",
        "exercises": {
          "BST-insert": {
            "long_name": "Binary Tree Insertion",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BST-delete": {
            "long_name": "Binary Tree Deletion",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          }
        }
      },
      "Development/Heaps": {
        "long_name": "Heaps",
        "exercises": {
          "binaryheap-insert-proficiency": {
            "long_name": "Binary Heap Insertion",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "binaryheap-delete-proficiency": {
            "long_name": "Binary Heap Deletion",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "binaryheap-buildheap-proficiency": {
            "long_name": "Binary Heap Building",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          }
        }
      },
      "Development/Huffman": {
        "long_name": "Huffman Coding Trees",
        "exercises": {
          "huffmanCON1": {
            "long_name": "Huffman Coding Tree Slideshow",
            "required": true,
            "points": 0.1,
            "threshold": 1.0
          },
          "HuffmanCoding": {
            "long_name": "Huffman Coding Tree Visualization",
            "required": true,
            "points": 0.1,
            "showhide": "show",
            "threshold": 1.0
          }
        }
      },
      "Development/HuffProof": {
        "long_name": "Proof for Huffman Coding",
        "exercises": {}
      },
      "Development/BinaryTreeSumm": {
        "long_name": "Binary Tree Chapter Summary",
        "exercises": {}
      }
    },
    "GeneralTrees": {
      "Development/GenTreeIntro": {
        "long_name": "General Tree Intrduction",
        "exercises": {}
      },
      "Development/UnionFind": {
        "long_name": "Union/Find",
        "exercises": {}
      },
      "Development/GenTreeImplement": {
        "long_name": "General Tree Implementations",
        "exercises": {}
      },
      "Development/Kary": {
        "long_name": "K-ary Trees",
        "exercises": {}
      },
      "Development/SequentialRep": {
        "long_name": "Sequential Tree Representations",
        "exercises": {}
      }
    },
    "File Processing": {
      "Development/FileProc": {
        "long_name": "File Processing",
        "exercises": {}
      },
      "Development/BuffPool": {
        "long_name": "Buffer Pools",
        "exercises": {}
      },
      "Development/MemoryMan": {
        "long_name": "Memory Management",
        "exercises": {}
      },
      "Development/ExternalSort": {
        "long_name": "External Sorting",
        "exercises": {}
      }
    },
    "Hashing": {
      "Development/PerfectHash": {
        "long_name": "Perfect Hashing",
        "exercises": {
          "perfectHashAV": {
            "long_name": "Perfect Hashing Visualization",
            "required": false,
            "showhide": "none",
            "points": 0,
            "threshold": 1.0
          }
        }
      }
    },
    "Graphs": {
      "Development/GraphIntro": {
        "long_name": "Introduction and Terminology",
        "exercises": {}
      },
      "Development/GraphImpl": {
        "long_name": "Graph Implementation",
        "exercises": {}
      },
      "Development/GraphTraversal": {
        "long_name": "Graph Traversal",
        "exercises": {
          "graphDFS": {
            "long_name": "Depth First Search Visualization",
            "required": false,
            "points": 0,
            "showhide": "show",
            "threshold": 1.0
          },
          "graphBFS": {
            "long_name": "Breadth First Search Visualization",
            "required": false,
            "points": 0,
            "showhide": "show",
            "threshold": 1.0
          }
        }
      },
      "Development/GraphTopsort": {
        "long_name": "Topological Sort",
        "exercises": {
          "topsortCON1": {},
          "topSort": {
            "long_name": "Topological Sort (DFS) visualization",
            "required": false,
            "points": 0,
            "showhide": "show",
            "threshold": 1.0
          }
        }
      },
      "Development/GraphShortest": {
        "long_name": "Shortest Paths Problems",
        "exercises": {
          "dijkstraCON1": {}
        }
      },
      "Development/MCST": {
        "long_name": "Minimal Cost Spanning Trees",
        "exercises": {
          "PrimAV": {
            "long_name": "Prim's Algorithm Visualization",
            "required": false,
            "points": 0,
            "showhide": "show",
            "threshold": 1.0
          }
        }
      }
    },
    "Indexing": {
      "Development/IndexIntro": {
        "long_name": "Introduction to Indexing",
        "exercises": {}
      },
      "Development/LinearIndex": {
        "long_name": "Linear Indexing",
        "exercises": {}
      },
      "Development/BTree": {
        "long_name": "B-Trees",
        "exercises": {}
      }
    },
    "Advanced Analysis": {
      "Development/Recurrence": {
        "long_name": "Recurrence",
        "exercises": {}
      },
      "Development/AmortAnal": {
        "long_name": "Amortized Analysis",
        "exercises": {}
      }
    },
    "Advanced Linear Structures": {
      "Development/Multilists": {
        "long_name": "Multilists",
        "exercises": {}
      },
      "Development/SparseMatrix": {
        "long_name": "Sparse Matrices",
        "exercises": {}
      }
    },
    "Advanced Trees": {
      "Development/Spatial": {
        "long_name": "Spatial Data Structures",
        "exercises": {}
      },
      "Development/Trie": {
        "long_name": "Tries",
        "exercises": {}
      }
    },
    "Algorithms": {
      "Development/Knapsack": {
        "exercises": {
          "sackCallTree": {
            "long_name": "Knapsack Call Tree",
            "required": true,
            "points": 0.1,
            "threshold": 1.0
          },
          "sackTreePluck": {
            "required": true,
            "points": 0.1,
            "threshold": 1.0
          },
          "sackTraceBack": {
            "long_name": "Knapsack Tree Reduction",
            "required": true,
            "points": 0.1,
            "threshold": 1.0
          },
          "knapsackSelect": {
            "long_name": "Knapsack Select",
            "required": true,
            "points": 1,
            "threshold": 5
          },
          "knapsackFillRow": {
            "long_name": "Knapsack Fill Row",
            "required": true,
            "points": 1,
            "threshold": 5
          },
          "knapsackSolution": {
            "long_name": "Knapsack Solution",
            "required": true,
            "points": 1,
            "threshold": 5
          },
          "sackProficiency": {
            "long_name": "Knapsack Proficiency",
            "required": true,
            "points": 1,
            "threshold": 0.9
          }
        }
      },
      "Development/EditDistance": {
        "exercises": {
          "editRCT": {
            "long_name": "Edit RCT",
            "required": true,
            "points": 1,
            "threshold": 0.9
          },
          "editPrune": {
            "long_name": "Edit Prune",
            "required": true,
            "points": 1,
            "threshold": 0.9
          },
          "editOptimal": {
            "long_name": "Edit Optimal",
            "required": true,
            "points": 1,
            "threshold": 0.9
          },
          "edit-KA1": {
            "long_name": "Edit KA1",
            "required": true,
            "points": 1,
            "threshold": 5
          },
          "edit-KA2": {
            "long_name": "Edit KA2",
            "required": true,
            "points": 1,
            "threshold": 5
          }
        }
      }
    },
    "Complexity": {
      "Development/Reductions": {
        "long_name": "Reductions",
        "exercises": {}
      },
      "Development/Computability": {
        "long_name": "Computability",
        "exercises": {}
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "exercises": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "exercises": {}
      }
    }
  }
}
