{
  "title": "Advanced Recursion Tutor",
  "build_dir": "Books",
  "code_dir": "SourceCode/",
  "code_lang": {
    "Java": { "ext":["java"], "label":"Java","lang":"java"},
    "Processing": { "ext":["pde"], "label":"Processing","lang":"java"}
  },
  "tabbed_codeinc": false,
  "module_origin": "http://algoviz.org",
  "exercise_server": "https://ltitest.cs.vt.edu:8443",
  "logging_server": "https://ltitest.cs.vt.edu:8443",
  "score_server": "https://ltitest.cs.vt.edu:8443",
  "build_JSAV": false,
  "allow_anonymous_credit": true,
  "suppress_todo": false,
  "glob_exer_options": {
    "JXOP-debug": "true"
  },
  "assumes": "recursion; binary tree terminology",
  "chapters": {
    "Advanced Recursion Tutorial": {
      "Binary/RecursiveDS": {
        "long_name": "Binary Tree as a Recursive Data Structure",
        "exercises": {
          "SumBinaryTreeCON": {
            "long_name": "Sum values in a Binary Tree Slide Show",
            "required": true,
            "points": 1.0,
            "threshold": 0.90
           }
         }
      },
      "Binary/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "exercises": {
          "preorderCON": {
            "long_name": "Preorder Traversal Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "postorderCON": {
            "long_name": "Postorder Traversal Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "inorderCON": {
            "long_name": "Inorder Traversal Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "btTravInorderPRO": {
            "long_name": "Binary Tree Inorder Traversal Exercise",
            "exer_options": { "JXOP-code": "none" },
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "btTravPreorderPRO": {
            "long_name": "Binary Tree Preorder Traversal Exercise",
            "exer_options": { "JXOP-code": "none" },
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "btTravPostorderPRO": {
            "long_name": "Binary Tree Postorder Traversal Exercise",
            "exer_options": { "JXOP-code": "none" },
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "TravSumm": {
            "long_name": "Tree Traversal Summary Questions",
            "required": true,
            "points": 1.0,
            "threshold": 3
          }
        }
      },
      "Binary/WritingTraversals": {
        "long_name": "Writing Tree Traversals",
        "exercises": {        
          "BTincPROG": {
            "long_name": "Node Increment Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 1
          }
        }
      },
      "BTRecurTutor/BinaryTreeInfFlw": {
        "long_name": "Binary Tree Information Flow",
        "exercises": {
          "BTsetdepthPROG": {
            "long_name": "Set Node Depth Programming Exercise",
            "showhide": "show",
            "required": true,
            "points": 2.0,
            "threshold": 1
          },
          "BinaryTreeMistakesCON": {
            "long_name": "Binary Tree Common Mistakes Slideshow",
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "BTreturnPROGSumm": {
            "long_name": "Collect-and-Return Programming Exercises",
            "showhide": "show",
            "required": true,
            "points": 4.0,
            "threshold": 2.0
          },
          "BTcheckvalPROG": {
            "long_name": "Node Value Count Programming Exercise",
            "showhide": "show",
            "required": true,
            "points": 2.0,
            "threshold": 1
          },
          "BTtransferPROGSumm": {
            "long_name": "Duel-Flow Programming Exercises",
            "showhide": "show",
            "required": true,
            "points": 4.0,
            "threshold": 2
          }
        }
      },
      "Binary/BST": {
        "long_name": "Binary Search Trees",
        "exercises": {
          "BSTsearchCON": {
            "long_name": "BST Search Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTsearchPRO": {
            "long_name": "BST Search Proficiency Exercise",
            "exer_options": {
              "JXOP-code": "none",
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "undo"
            },
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "BSTinsertCON": {
            "long_name": "BST Insert Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTinsertPRO": {
            "long_name": "BST Insert Proficiency Exercise",
            "exer_options": {
              "JXOP-code": "none",
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "undo"
            },
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "BSTdeletemaxCON": {
            "long_name": "BST deletemax Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTremoveCON": {
            "long_name": "BST remove Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTremovePRO": {
            "long_name": "BST Remove Proficiency Exercise",
            "exer_options": {
              "JXOP-code": "none",
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "undo"
            },
            "required": true,
            "points": 2.0,
            "threshold": 0.90
          },
          "BSTSumm": {
            "long_name": "BST Question Summary",
            "required": true,
            "points": 1,
            "threshold": 2
          }
        }
      },
      "BTRecurTutor/BinaryTreeGuidedInfFlw": {
        "long_name": "Binary Tree Guided Information Flow",
        "exercises": {
          "IneffBinaryTreeRangeCON": {
            "long_name": "Inefficient Binary Tree Traversal on Range Slide Show",
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "BSTsmallcountPROG": {
            "long_name": "BST Small Value Count Programming Exercise",
            "required": true,
            "points": 2.0,
            "threshold": 2.0,
            "showhide": "Show"
          }
        }
      },
      "BTRecurTutor/MultipleBinaryTrees": {
        "long_name": "Multiple Binary Trees",
        "exercises": {
          "MultiTreePROGSumm": {
            "long_name": "Multiple Binary Trees Exercises",
            "required": true,
            "points": 3.0,
            "threshold": 3.0,
            "showhide": "Show"
          }
        }
      }, 
      "BTRecurTutor/BSTCheck": {
        "long_name": "BSTcheck Function",
	"dispModComp": true,
        "exercises": {}
      },
      "BTRecurTutor/recSorting": {
        "long_name": "Recursive Sorting",
        "exercises": {}
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "exercises": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "exercises": {}
      }
    }
  }
}
