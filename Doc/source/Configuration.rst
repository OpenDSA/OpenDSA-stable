.. _Configuration:

==========================================================
Compiling Book Instances: the OpenDSA Configuration System
==========================================================

--------
Overview
--------

A given OpenDSA eTextbook is called a "book instance".
The contents of a book instance is defined by a configuration file,
the detailed syntax for which is defined in this section.
But in practice, its easiest to start by copying an existing
configuration file, and then changing it to fit your needs.
Configuration files are JSON files, normally stored in OpenDSA/config.
From the top level of an OpenDSA repository, you can compile a book
instance (given the existance of a configuration file named
``config/myconfig.json``) by issuing this command:

``python tools/configure.py config/myconfig.json``

A set of ``make`` targets are available within the OpenDSA Makefile.
If you want to compile one of the existing book instances in the
Makefile, you can just type:

``make <bookname>``


**Note:** If you are responsible for setting up the book instance to
be used in a specific course, then you will probably want to manage
the corresponding class instance set up at the OpenDSA backend
server.
This involves registering the various exercises with the backend
database.
See  "Registering a Book Instance" in the
:ref:`Instructor's Tools  <InstructorTools>` section.


---------------------------------------
Motivation for the Configuration System
---------------------------------------

* Allows content to be environment-independent

  * Configuration file contains all environment-dependent settings such as paths and target URLs
  * Example: If developers want to point their front-end code at different backend systems, they simply make the change in their own config file.  They can share all OpenDSA content, but when they build the book, it will be built using their personalized settings

* Allows easy replication

  * Collects all settings and preferences required to configure an instance of OpenDSA in a single, portable file that can be easily shared among instructors.
  * Once a configuration has been created, instructors can make identical copies without going through the configuration process

* Allows fine grain control

  * Existing configuration files provide sensible defaults, but allow instructors to control aspects such as how many points a specific exercise is worth or whether it is required for module proficiency

* Configuration file can be generated by a simple front-end or created by hand (tedious, but possible)


---------------------
Configuration Process
---------------------

Please see the comment at the beginning of configure.py for more information about how the script works.  Keeping the information in the script itself ensures the script is well-documented and makes it easier to maintain the documentation.

**Note**: The OpenDSA root directory must be web-accessible as there are many supplemental directories and files (AV/, Exercises/, lib/, SourceCode/, etc) which must be referenced.  These files are identical for all books and not copying them reduces the footprint of each book.


Module and Exercise Removal
===========================

* Only the modules listed in the configuration file will be included.
  To remove a module from the book, simply remove the module object
  from the configuration file.

* To remove an exercise from a module, set the "remove" attribute to
  true.  Exercises that do not appear in the configuration file will
  still be included in the book using the default configuration
  options.  During compilation, a list will be printed of any
  exercises which were encountered in the modules but not present in
  the configuration file.


Future Features
===============

* Implement independent source locations for various files rather than basing them all off the OpenDSA root directory

  * Implement support for hosting AVs and exercises on a different domain than modules

* Ability to optionally include subsections in an RST file - similar to how we include / exclude exercises


------
Format
------

* OpenDSA configuration files are stored using JSON

  * Easily readable and writeable by both humans and machines

    * Easy to create and manipulate using Python and JavaScript
    * Easy to manually edit

  * Efficient

    * Less verbose than XML resulting in a smaller file size

  * Abundance of online JSON validators and formatters

* Book name

  * The name of the configuration file will be used to uniquely identify this instance of OpenDSA in the backend database

Here are the settings definitions.
All are required unless otherwise specified.

* **title** - the title of the OpenDSA textbook

* **build_dir** - (optional) the directory where the configured book directory will be created, defaults to 'Books' if omitted

  * A new directory, named after the configuration file, will be created at this location and serve as the output directory for the configuration process.  Files required to compile the book will be copied / written to the output directory, including modified version of the source RST files

    * Example: Assume "build_dir": "Books" and the name of the configuration file used is "CS3114.json", the output directory would be "Books/CS3114/"

  * The compiled textbook will appear in ``[build_dir]/[book name]/html``
  * This directory must be web accessible

* **code_dir** (optional) - specifies the directory which contains another directory whose name matches ``code_lang`` (see below) which contains the source code used in examples, defaults to ``SourceCode`` if omitted

  * Ex: If ``{"code_dir": "SourceCode/", "code_lang": "python"}`` then the book would look for example Python source code in ``~OpenDSA/SourceCode/python``

* **lang** (optional) - specifies the native language of the book using the official ISO 639-1 or 639-2 standard abbreviation, defaults to ``en`` if omitted

* **code_lang** - a dictionary where each key is the name of a programming language (supported by Pygments and matching a directory name in ``code_dir``) and each value is a list of file extensions.  The order in which the languages and extensions are provided determines their precedence.

  * Ex: ``"code_lang": {"C++": ["cpp", "h"], "Java": ["java"], "Processing": ["pde"]}``
  * In this example, the system would search for ``.cpp`` files, followed by ``.h`` files, ``.java`` files, and finally ``.pde`` files

* **tabbed_codeinc** (optional) - a boolean that controls whether or not code is displayed in a tabbed interface.  If true, it will display the specified code in each of the languages specified in ``code_lang`` (if the code exists) in a tabbed container.  If false, it will display the code in a single language (the first language for which the code exists with the order of precedence determined by the order specified in ``code_lang``).  Defaults to true if omitted

* **module_origin** - the protocol and domain where the module files are hosted

  * Used by embedded exercises as the target of HTML5 post messages which send information to the parent (module) page
  * Ex: "module_origin": "http://algoviz.org",

* **av_root_dir** - (optional) allows the user to change the default location where the AV/ directory can be found, defaults to OpenDSA root directory if omitted

  * This can point to another location on the same machine that hosts the module files (as long as it is web-accessible) or it can point to a remote location (not fully supported yet)
  * **Note**: This should not point to the AV/ directory itself, but the directory containing the AV/ directory (to avoid breaking the relative paths in the RST files)
  * If this attribute references a remote location, 'av_origin' must be present and the value must be a prefix of the remote location
  * If this attribute is not present, the OpenDSA root directory will be used as the default
  * Ex: "av_root_dir": "/home/algoviz/OpenDSA/test/",
  * Ex: "av_root_dir": "http://algoviz.org/OpenDSA/", // This directory contains an AV/ directory

* **av_origin** - (optional, unless **av_root_dir** is defined) the protocol and domain where the AV files are hosted, defaults to match ``module_origin`` if omitted

  * Used on module pages to allow HTML5 post messages from this origin, allows embedded AVs to communicate with the parent module page
  * Ex: "av_origin": "http://algoviz.org",

* **glob_mod_options** - (optional) an object containing options applied to every module in the book, allow settings specific to a certain module to be passed to that module alone, can be overridden by module-specific options

* **glob_exer_options** - (optional) an object containing options applied to every exercise in the book, can be used to control the behavior of the exercise, can be overridden by exercise-specific options

* **exercises_root_dir** - (optional) allows the user to change the default location where the Exercises/ directory can be found, defaults to OpenDSA root directory if omitted

  * This can point to another location on the same machine that hosts the module files (as long as it is web-accessible) or it can point to a remote location (not fully supported yet)
  * **Note**: This should not point to the Exercises/ directory itself, but the directory containing the Exercises/ directory (to avoid breaking the relative paths in the RST files)
  * If this attribute references a remote location, 'exercise_origin' must be present and the value must be a prefix of the remote location
  * If this attribute is not present, the OpenDSA root directory will be used as the default
  * Ex: "exercises_root_dir": "/home/algoviz/OpenDSA/test/",
  * Ex: "exercises_root_dir": "http://algoviz.org/OpenDSA/", // This directory contains an Exercises/ directory

* **exercise_origin** - (optional, unless **exercises_root_dir** is defined) the protocol and domain where the Exercises files are hosted, defaults to match ``module_origin`` if omitted

  * Used on module pages to allow HTML5 post messages from this origin, allows embedded exercises to communicate with the parent module page
  * Ex: "exercise_origin": "http://algoviz.org",

* **exercise_server** - (optional) the protocol and domain (and port number, if different than the protocol default) of the exercise server which provides verification for the programming exercises, defaults to an empty string (exercise server disabled) if omitted

  * Trailing '/' is optional
  * Ex: "exercise_server": "https://opendsa.cc.vt.edu/",

* **logging_server** - (optional) the protocol and domain (and port number, if different than the protocol default) of the logging server which supports interaction data collection, defaults to an empty string (logging server disabled) if omitted

  * Trailing '/' is optional
  * Ex: "logging_server": "https://opendsa.cc.vt.edu/",

* **score_server** - (optional) the protocol and domain (and port number, if different than the protocol default) of the score server which supports centralized user score collection, defaults to an empty string (score server disabled) if omitted

  * Trailing '/' is optional
  * Ex: "score_server": "https://opendsa.cc.vt.edu/",

* **build_JSAV** - (optional) a boolean controlling whether or not the JSAV library should be rebuild every time the configuration file is run, defaults to ``false`` if omitted

  * This value should be set to false for development
  * Instructors may wish to set this to true for production environments when configuration is run infrequently and JSAV is likely to have changed since the last time configuration occurred

* **build_cmap** - (optional) a boolean controlling wether or not the glossary terms concept map should be diplayed. Defaults to ``false``.

* **allow_anonymous_credit** - (optional) a boolean controlling whether credit for exercises completed anonymously (without logging in) will be transferred to the next user to log in, defaults to ``true`` if omitted

* **req_full_ss** - (optional) a boolean controlling whether students must view every step of a slideshow in order to obtain credit, defaults to ``true`` if omitted

* **start_chap_num** - (optional) specifies at which number to start numbering chapters, defaults to 0 if omitted

* **suppress_todo** - (optional) a boolean controlling whether or not the TODO directives are removed from the RST source files, if this attribute is not present, defaults to ``false`` if omitted

  * **Note**: When changing from ``false`` to ``true``, you must run ``make clean`` to completely remove any references to ``ToDo``

* **assumes** - (optional) a string containing a semi-colon delimited list of topics with which the book assumes students are familiar

* **chapters** - this object contains a hierarchy of chapters, sections, subsections, modules and exercises

  * Each key in "chapters" represents a chapter name, any key values in the associated object represent sections within that chapter.  This concept is applied recursively until a module object is reached.  A module object is one whose key matches the name of an RST file in the ~OpenDSA/RST/source/ directory and which contains the key "exercises".

  * **hidden** - This is an optional field to signal the preprocessor to not display the content of the chapter in the TOC. The configuration script will add the new directive ``odsatoctree``. The flagged chapters entries in the TOC will be of class ``hide-from-toc``, and will be removed by a CSS rule in odsaMOD.css file.

  * **Modules**

    * The key relating to each module object must correspond with a path to an RST file found in ~OpenDSA/RST/source/ or a sub-directory
    * If a module contains no exercises, it should still contain a key "exercises" with a value of an empty object

    * **long_name** - a long form, human-readable name used to identify the module in the GUI

    * **dispModComp** - (optional) a flag which if set to "true" will force the "Module Complete" message to appear even if the module contains no required exercises, if set to "false", the "Module Complete" message will not appear even if the module DOES contain required exercises

    * **mod_options** - (optional) overrides ``glob_mod_options``, allows modules to be configured independently from one another.  Can be used to override the options set using ``glob_mod_options``. Options that should be stored in ``JSAV_OPTIONS`` should be prepended with ``JOP-`` and options that should be stored in ``JSAV_EXERCISE_OPTIONS`` should be prepended with ``JXOP-`` (can be used to override the defaults set in ``odsaUtils.js``).  All other options will be made directly available to modules in the form of a parameters object created automatically by the client-side framework (specifically whn ``parseURLParams()`` is called in ``odsaUtils.js``)

    * **sections** - (optional) a collection of section objects that provide additional information for sections created using the ``showhidecontent`` directive. The ``sections`` object should contain keys that match the ``section_id`` used by the ``showhidecontent`` directive, which in turn map to a dictionary of options for that section.

      * If a section is omitted, the content will appear in the module without a button to control whether it is shown or hidden (removal must be explicit)
      * To remove the section completely, provide the option ``remove`` and set it to ``true``
      * All options provided within a section object (with the exception of ``remove``) are appended to the directive, please see the :ref:`Extensions <ODSAExtensions>` section for a list of supported arguments

    * **exercises** - a collection of exercise objects representing the exercises found in the module's RST file

      * Each exercise object contains required information about that exercise including:

        * **exer_options** - (optional) an object containing exercise-specific configuration options for JSAV.  Can be used to override the options set using ``glob_exer_options``. Options that should be stored in ``JSAV_OPTIONS`` should be prepended with ``JOP-`` and options that should be stored in ``JSAV_EXERCISE_OPTIONS`` should be prepended with ``JXOP-`` (can be used to override the defaults set in ``odsaUtils.js``).  All other options will be made directly available to exercises in the form of a parameters object created automatically by the client-side framework (specifically whn ``parseURLParams()`` is called in ``odsaUtils.js``)

        * **long_name** - (optional) a long form, human-readable name used to identify the exercise in the GUI, defaults to short exercise name if omitted
        * **points** - (optional) the number of points the exercise is worth, defaults to ``0`` if omitted
        * **remove** - (optional) if set to true, the exercise will not be included in the module

          * This option can only be used with exercises embedded using the 'avembed' directive.  Slideshows and diagrams created using the 'inlineav' directive are considered content and cannot be removed via the configuration file.

        * **required** - (optional) whether the exercise is required for module proficiency, defaults to ``false`` if omitted
        * **showhide** - (optional) controls whether or not the exercises is displayed and a Show / Hide button created

          * Setting this attribute to "show" or "hide" will create the corresponding button and if set to "show", it will display the embedded page
          * Setting this attribute to "none" will cause the exercise to be embedded without a button
          * If this attribute is not present in the config file, the default behavior is 'hide'
          * This option is only valid for exercises embedded using the 'avembed' directive.  Slideshows and diagrams created using the 'inlineav' directive are considered content and cannot be removed via the configuration file.

        * **threshold** - (optional) the percentage a user needs to score on the exercise to obtain proficiency, defaults to 100% (1 on a 0-1 scale) if omitted

      * JSAV-based diagrams do not need to be listed

    * **codeinclude** (optional) - an object that maps the path from a codeinclude to a language which should be used for the code.

      * The following example would set C++ as the language for the codeinclude "Sorting/Mergesort"
      * Ex: "codeinclude": {"Sorting/Mergesort": "C++"}

---------------------
Configuring Exercises
---------------------

The most important concern when configuring proficiency exercises is
the scoring option to be used.
JSAV-based proficiency exercises have a number of possible grading
methods:

* ``atend``: Scores are only shown at the end of the exercise.
* ``continuous:undo``: Mistakes are undone, the student will lose that
  point but have to repeat the step.
* ``continuous:fix``: On a mistake, the step is corrected, the student
  loses that point, and then is ready to attempt the next step. This
  mode requires that the exercise have the capability to fix the
  step. If it does not, this grading mode will default to
  ``continuous:undo``.

All proficiency exercises can be controlled through URL
parameters. What the configuration file actualy does by setting
``exer_options`` is specify what should be in those URL parameters
that are sent to the exercise by the OpenDSA module page.
Here is an example for configuring an exercise::

          "shellsortPRO": {
            "long_name": "Shellsort Proficiency Exercise",
            "required": true,
            "points": 2.0,
            "threshold": 0.9,
            "exer_options": {
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "fix"
            }
          },

This configuration will affect the configuration of an entity called
``shellsortPRO`` (presumeably defined by an ``..avembed`` directive in
the corresponding OpenDSA module).
It is scored (as defined by the ``required`` field being ``true``),
and is worth 2.0 points of credit once he/she reaches "proficiency".
To reach "proficiency" requires correctly achieving 90% of the
possible steps on some attempt at the exercise (as defined by
``threshold``).
The exercise is instructed to use the ``continuous:fix`` mode of
scoring.

In addition to the standard ``JXOP-feedback`` and ``JXOP-fixmode``
parameters, a given AV or exercise might have ad hoc parameter
settings that it can accept via URL parameter.
Examples might be algorithm variations or initial data input values.
Those would have to be defined by the exercise itself.
These (along with the standard grading options) can also have defaults
defined in the ``.json`` file associated with the AV or exercise,
which might help to document the available options.
Any such ad hoc parameter defaults can be over-ridden in the
``exer_options`` setting in the configuration file.
